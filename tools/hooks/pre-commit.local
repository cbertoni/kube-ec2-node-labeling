#!/bin/bash

# Redirect output to stderr.
exec 1>&2

PEP8_FLAGS=${PEP8_FLAGS:-'--max-line-length=99'}
TMPDIR=${TMPDIR:-'/tmp'}
TMPFILE=$(mktemp "${TMPDIR}"/tmp.XXXXXXXXXX)
STATUS=0

# Register exit trap for removing temporary files
trap 'rm -rf $TMPFILE' EXIT INT HUP

# Check for the pep8 binary
which pep8 >/dev/null 2>&1 || exit 1

# Check for the ruby binary
which ruby >/dev/null 2>&1 || exit 1

# Get correct git revision
if git rev-parse --quiet --verify HEAD > /dev/null
then
    revision=HEAD
else
    # Initial commit: diff against an empty tree object
    revision=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

IFS="
 "

# Get a list of files changed in this transaction
declare -a FILES
FILES=$(git diff --cached --name-only --diff-filter=ACM --ignore-submodules "${revision}")

for file in ${FILES[@]}
do
    # Don't check empty files
    if [[ $(git cat-file -s ":0:${file}") -eq 0 ]]; then
        continue
    fi
    extension="${file##*.}"
    git cat-file blob ":0:${file}" > $TMPFILE

    if [[ $? -ne 0 ]]; then
        echo "Unable to checkout ${file}"
        STATUS=2
    else
        case $extension in
            py)
                # Python PEP8 check
                pep8 ${PEP8_FLAGS} ${TMPFILE} >/dev/null 2>&1
                if [[ $? -ne 0 ]]; then
                    echo "PEP8 validation error in ${file}. Run 'pep8 ${PEP8_FLAGS} ${file}'" >&2
                    STATUS=2
                fi
            ;;
            yml|yaml)
                # syntax YAML files, https://ttboj.wordpress.com/2013/08/25/finding-yaml-errors-in-puppet/
                ruby -ryaml -e "YAML.parse(File.open('${TMPFILE}'))" >/dev/null 2>&1
                if [[ $? -ne 0 ]]; then
                    echo "YAML syntax error in ${file}" >&2
                    STATUS=2
                fi
            ;;
            json)
                # syntax YAML files, https://ttboj.wordpress.com/2013/08/25/finding-yaml-errors-in-puppet/
                ruby -rjson -e "JSON.parse(File.open('${TMPFILE}').read)" >/dev/null 2>&1
                if [[ $? -ne 0 ]]; then
                    echo "JSON syntax error in ${file}" >&2
                    STATUS=2
                fi
            ;;
        esac
    fi
done

# Run unit tests
pytest --cov-report term --cov

exit $STATUS
